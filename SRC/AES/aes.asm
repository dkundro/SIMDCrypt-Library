global cipher, decipher, expandKey, setAES128, setAES192, setAES256

extern malloc
extern free

section .data

Nb: db 0
Nk: db 0
Nr: db 0

state: dq 0, 0
w: dq 0
wCount: dq 0
extKeySize: dq 0
keySize: dq 0

maxWCount: dq 0

mask: dq 0x030e09040f0a0500; mitad baja    
      dq 0x0b06010c07020d08; mitad alta

maskRot: dq 0x0d0905010C080400; mitad baja    
         dq 0x0f0b07030e0a0602; mitad alta

maskIRot: dq 0x0b0e0104070a0d00; mitad baja    
       	  dq 0x0306090c0f020508; mitad alta

rConConsts: db 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a

sBox: db 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\
	 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\
	 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\
	 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\
	 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\
	 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\
	 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\
	 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\
	 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\
	 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\
	 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\
	 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\
	 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\
	 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\
	 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\
	 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16

InvsBox: db 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d

eTable: db 0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,\
	0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,\
	0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,\
	0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,\
	0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,\
	0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,\
	0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,\
	0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,\
	0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,\
	0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,\
	0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,\
	0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,\
	0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,\
	0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,\
	0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,\
	0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01

 lTable: db 0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,\
	0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,\
	0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,\
	0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,\
	0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,\
	0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,\
	0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,\
	0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,\
	0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,\
	0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,\
	0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,\
	0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,\
	0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,\
	0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,\
	0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,\
	0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07



section .text

setAES128:
	XOR RAX, RAX
	MOV [state], RAX
	MOV [state+1], RAX
	MOV [w], RAX
	MOV [wCount], RAX
	MOV [Nb], byte 4
	MOV [Nr], byte 10
	MOV [Nk], byte 4
	MOV RAX, 160
	MOV [maxWCount], RAX
	MOV RAX, 176
	MOV [extKeySize], RAX
	MOV RAX, 128
	MOV [keySize], RAX
ret 

setAES192:
	XOR RAX, RAX
	MOV [state], RAX
	MOV [state+1], RAX
	MOV [w], RAX
	MOV [wCount], RAX
	MOV [Nb], byte 4
	MOV [Nr], byte 12
	MOV [Nk], byte 6
	MOV RAX, 192
	MOV [maxWCount], RAX
	MOV RAX, 208
	MOV [extKeySize], RAX
	MOV RAX, 192
	MOV [keySize], RAX
ret 

setAES256:
	XOR RAX, RAX
	MOV [state], RAX
	MOV [state+1], RAX
	MOV [w], RAX
	MOV [wCount], RAX
	MOV [Nb], byte 4
	MOV [Nr], byte 14
	MOV [Nk], byte 8
	MOV RAX, 224
	MOV [maxWCount], RAX
	MOV RAX, 240
	MOV [extKeySize], RAX
	MOV RAX, 256
	MOV [keySize], RAX
ret 

cipher:	
	PUSH RBX
	;RDI puntero a mensaje original
	MOVDQU XMM0, [RDI]
 	MOVDQU [state], Xmm0	

	CALL addRoundKey
	XOR RBX, RBX
	MOV BL, [Nr]
	DEC BL
	MOV R10, 0
	.ciclo:
		CMP R10, RBX
		JE .finCiclo
		
		CALL subBytes
		CALL shiftRows
		CALL mixColumns
		CALL addRoundKey

		INC R10
		JMP .ciclo
	.finCiclo:
	CALL subBytes
	CALL shiftRows
	CALL addRoundKey
	MOVDQU XMM0, [state]

	MOV RDI, [w]
	CALL free

	MOV RDI, 16
	CALL malloc
	MOVDQU [RAX], XMM0
	POP RBX
ret

decipher:
	PUSH RBX
	;RDI puntero a mensaje original
	PUSH RDI
	MOVDQU XMM0, [RDI]
 	MOVDQU [state], Xmm0	
	SUB RSP, 8; alineo el stack
	
	CALL invAddRoundKey

	MOV BL, byte [Nr]
	DEC BL
	.ciclo:
		CMP BL, 0
		JE .finCiclo
		
		CALL invShiftRows
		CALL invSubBytes
		CALL invAddRoundKey
		CALL invMixColumns

		DEC BL
		JMP .ciclo
	.finCiclo:
	CALL invShiftRows
	CALL invSubBytes
	CALL invAddRoundKey
	MOVDQU XMM0, [state]
	ADD RSP, 8

	POP RDI
	CALL free

	MOV RDI, [w]
	CALL free

	MOV RDI, 16
	CALL malloc
	MOVDQU [RAX], XMM0
	POP RBX
ret

subBytes:
	MOV ECX, 0
	.cicloFilas:
		CMP ECX, 4
		JE .finCicloFilas

		MOV EDX, 0
		.cicloColumnas:
			CMP EDX, 4
			JE .finCicloColumnas

			XOR EAX, EAX
			MOV AL, [state+EDX+ECX*4]; AL = state[fila][columna]
			MOV AL, [sBox+EAX]; AL = Sbox[(state[fila][columna])]
			MOV [state+EDX+ECX*4], AL

			INC EDX
			JMP .cicloColumnas
		.finCicloColumnas:	

		INC ECX
		JMP .cicloFilas
	.finCicloFilas:
ret

subWord:
	;EDI dword a la cual debo sustituir cada byte por su correspondiente valor de la sBox
	MOV ECX, EDI
	AND ECX, 0x000000FF
	MOV AL, [sBox+ECX];  EAX= XXXR

	MOV ECX, EDI
	and ECX, 0x0000FF00
	SHR ECX, 8
	MOV AH, [sBox+ECX]; EAX= XXRR

	MOV ECX, EDI
	AND ECX, 0x00FF0000
	SHR ECX, 16
	MOV DL, [sBox+ECX]; 
	
	MOV ECX, EDI
	AND ECX, 0xFF000000
	SHR ECX, 24
	MOV DH, [sBox+ECX]; EDX= XXSS
	
	SHL EDX, 16; EDX= SS00
	SHL EAX, 16; EAX= RR00
	SHR EAX, 16; EAX= 00RR
	OR EAX, EDX; EAX= SSRR
ret

shiftRows:
	MOVDQU XMM1, [state]
	MOVDQU XMM2, [mask]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1
ret

addRoundKey:
	PUSH R14
	PUSH R15

	MOVDQU XMM1, [state]
	MOV R14, [w]
	MOV R15, [wCount]
	MOVDQU XMM2, [R14+R15]
	PXOR XMM1, XMM2
	MOVDQU [state], XMM1
	ADD R15, 16
	MOV [wCount], R15
	
	POP R15
	POP R14
ret
	
expandKey:
	PUSH RBX
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15

	;RDI puntero a key
	MOV R15, RDI
	MOV RDI, [extKeySize]; cantidad de bytes para la clave extendida 
	CALL malloc; pido memoria
	
	; copio la clave original segun el tamaño de la misma
	MOV R14, [keySize]
	CMP R14, 128
	JNE .192
		MOVDQU XMM0, [R15]
		MOVDQU [RAX], XMM0
		JMP .endif
	.192:
	CMP R14, 192
	JNE .256
		MOVDQU XMM0, [R15]
		MOV R14, [R15+16]
		MOVDQU [RAX], XMM0
		MOV [RAX+16], R14
		JMP .endif
	.256:
		VMOVDQU YMM0, [R15]
		VMOVDQU [RAX], YMM0
	.endif
	MOV R14, RAX
	XOR RBX, RBX
	MOV BL, byte [Nk]
	XOR RCX, RCX
	MOV CL, byte [Nr]
	MOV R15, RCX
	INC R15
	IMUL R15, 4

	MOV R12, RBX
	.cicloExpand:
		CMP R12, R15
		JE .finCicloExpand

		MOV EDI, [R14+(R12-1)*4]; temp
		MOV RAX, R12
		XOR RDX, RDX
		MOV CX, BX
		DIV CX
		CMP DX, 0
		JNE .elseIf
			;rotDWord
			MOV EAX, EDI
			SHR EDI, 8
			SHL EAX, 24
			OR EDI, EAX; 
			CALL subWord
			MOV EDI, EAX; EDI = temp = SubWord(RotWord(temp))
			MOV RAX, R12
			XOR RDX,RDX
			MOV CX, BX
			DIV CX; EAX= i/Nk
			MOV AL, [rConConsts+EAX]; EAX= XXXC
				
			XOR EDI, EAX
			JMP .cont
		.elseIf:
		MOV RAX, R12
		MOV AL, BL
		CMP AL, 6
		JNG .cont
			CMP DX, 4
			JNE .cont
				CALL subWord
				MOV EDI, EAX
		.cont:
		MOV R13, R12
		sub R13, RBX
		MOV ESI, [R14+R13*4]
		XOR EDI, ESI
		MOV [R14+R12*4], EDI				

		INC R12
		JMP .cicloExpand
	.finCicloExpand:
	MOV [w], R14

	POP R15
	POP R14
	POP R13
	POP R12
	POP RBX
ret

fMul:
	;DI
	;SI
	XOR RDX, RDX
	XOR RCX, RCX
	XOR RAX, RAX
	
	MOV CX, DI
	MOV DX, SI

	CMP CL, 0
	JE .ret
	CMP DL, 0
	JE .ret
	
	MOV CL, [lTable+ECX]
	MOV DL, [lTable+EDX]
	
	MOV AX, CX
	add AX, DX
	
	CMP AX, 255	
	JNG .retEt
		SUB AX, 255
	.retEt:
		MOV AL, [eTable+EAX]
	.ret:
ret	

mixColumns:
	PUSH RBX
	PUSH R15
	SUB RSP, 8

	MOVDQU XMM1, [state]
	MOVDQU XMM2, [maskRot]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1

	MOV R8, 0
	.cicloCol:
		CMP R8, 4		
		JE .finCicloCol

		XOR RDX, RDX
		MOV DI, 0x0002
		MOV DL, [state+0*4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x02, s[0][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x0003
		MOV DL, [state+4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x03, s[1][c])
		XOR AL, BL

		MOV BL, [state+2*4+R8]  	
		XOR AL, BL
		MOV BL, [state+3*4+R8]  	
		XOR AL, BL

		AND RAX, 0x00000000000000FF
		MOV R9, RAX


		;//////////////////////////////////////////////	

		XOR RDX, RDX
		MOV DI, 0x0002
		MOV DL, [state+4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x02, s[1][c]) 
		MOV BL, AL
	
		XOR RDX, RDX
		MOV DI, 0x0003
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x03, s[2][c])
		XOR AL, BL

		MOV BL, [state+R8]  	
		XOR AL, BL
		MOV BL, [state+3*4+R8]  	
		XOR AL, BL

		SHL RAX, 8
		AND RAX, 0x000000000000FF00
		OR R9, RAX		

		;//////////////////////////////////////////////

		XOR RDX, RDX
		MOV DI, 0x0002
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x02, s[2][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x0003
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x03, s[3][c])
		XOR AL, BL

		MOV BL, [state+R8]  	
		XOR AL, BL
		MOV BL, [state+4+R8]  	
		XOR AL, BL

		SHL RAX, 16
		AND RAX, 0x0000000000FF0000
		OR R9, RAX

		;//////////////////////////////////////////////

		XOR RDX, RDX
		MOV DI, 0x0002
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x02, s[3][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x0003
		MOV DL, [state+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x03, s[0][c])
		XOR AL, BL

		MOV BL, [state+4+R8]  	
		XOR AL, BL
		MOV BL, [state+8+R8]  	
		XOR AL, BL

		SHL RAX, 24
		MOV R15, 0x00000000FF000000
		AND RAX, R15
		OR R9, RAX

		;//////////////////////////////////////////////	
	
		MOV RAX, R9

		MOV [state+4*0+R8], AL
		SHR EAX, 8
		MOV [state+4*1+R8], AL
		SHR EAX, 8
		MOV [state+4*2+R8], AL
		SHR EAX, 8
		MOV [state+4*3+R8], AL

		INC R8
		JMP .cicloCol
	.finCicloCol:

	MOVDQU XMM1, [state]
	MOVDQU XMM2, [maskRot]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1

	ADD RSP, 8
	POP R15
	POP RBX
ret

invSubBytes:
	MOV ECX, 0
	.cicloFilas:
		CMP ECX, 4
		JE .finCicloFilas

		MOV EDX, 0
		.cicloColumnas:
			CMP EDX, 4
			JE .finCicloColumnas

			XOR EAX, EAX
			MOV AL, [state+EDX+ECX*4]; AL = state[fila][columna]
			MOV AL, [InvsBox+EAX]; AL = InvsBox[(state[fila][columna])]
			MOV [state+EDX+ECX*4], AL

			INC EDX
			JMP .cicloColumnas
		.finCicloColumnas:	

		INC ECX
		JMP .cicloFilas
	.finCicloFilas:
ret

invAddRoundKey:
	PUSH R14
	PUSH R15

	MOVDQU XMM1, [state]
	MOV R14, [w]
	MOV R15, [maxWCount]
	MOVDQU XMM2, [R14+R15]
	PXOR XMM1, XMM2
	MOVDQU [state], XMM1
	SUB R15, 16
	MOV [maxWCount], R15

	POP R15
	POP R14
ret

invShiftRows:
	MOVDQU XMM1, [state]
	MOVDQU XMM2, [maskIRot]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1
ret

invMixColumns:
	PUSH RBX
	PUSH R15
	SUB RSP, 8; alineo el stack

	MOVDQU XMM1, [state]
	MOVDQU XMM2, [maskRot]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1

	MOV R8, 0
	.cicloCol:
		CMP R8, 4		
		JE .finCicloCol

		XOR RDX, RDX
		MOV DI, 0x000e
		MOV DL, [state+0*4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0e, s[0][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x000b
		MOV DL, [state+4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0b, s[1][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000d
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0d, s[2][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x0009
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x09, s[3][c])
		XOR BL, AL

		and RBX, 0x00000000000000FF
		MOV R9, RBX


		;//////////////////////////////////////////////	

		XOR RDX, RDX
		MOV DI, 0x0009
		MOV DL, [state+4*0+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x09, s[0][c]) 
		MOV BL, AL
	
		XOR RDX, RDX
		MOV DI, 0x000e
		MOV DL, [state+4*1+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0e, s[1][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000b
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0b, s[2][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000d
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0d, s[3][c])
		XOR BL, AL

		SHL RBX, 8
		AND RBX, 0x000000000000FF00
		OR R9, RBX		

		;//////////////////////////////////////////////

		XOR RDX, RDX
		MOV DI, 0x000d
		MOV DL, [state+4*0+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0d, s[0][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x0009
		MOV DL, [state+4*1+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x09, s[1][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000e
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0e, s[2][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000b
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0b, s[3][c])
		XOR BL, AL

		SHL RBX, 16
		AND RBX, 0x0000000000FF0000
		OR R9, RBX

		;//////////////////////////////////////////////

		XOR RDX, RDX
		MOV DI, 0x000b
		MOV DL, [state+4*0+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0b, s[0][c]) 
		MOV BL, AL
		
		XOR RDX, RDX
		MOV DI, 0x000d
		MOV DL, [state+4+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0d, s[1][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x0009
		MOV DL, [state+4*2+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x09, s[2][c])
		XOR BL, AL

		XOR RDX, RDX
		MOV DI, 0x000e
		MOV DL, [state+4*3+R8]
		MOV SI, DX
		CALL fMul; AL = fMul(0x0e, s[3][c])
		XOR BL, AL

		SHL RBX, 24
		MOV R15, 0x00000000FF000000
		AND RBX, R15
		OR R9, RBX

		;//////////////////////////////////////////////	
	
		MOV RAX, R9

		MOV [state+4*0+R8], AL
		SHR EAX, 8
		MOV [state+4*1+R8], AL
		SHR EAX, 8
		MOV [state+4*2+R8], AL
		SHR EAX, 8
		MOV [state+4*3+R8], AL

		INC R8
		JMP .cicloCol
	.finCicloCol:

	MOVDQU XMM1, [state]
	MOVDQU XMM2, [maskRot]
	PSHUFB XMM1, XMM2
	MOVDQU [state], XMM1

	ADD RSP, 8
	POP R15
	POP RBX
ret
